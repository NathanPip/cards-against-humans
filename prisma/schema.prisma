// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Lobby {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
}

model CAHPack {
  id         String          @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  whiteCards CAHWhiteCard[]
  blackCards CAHBlackCard[]
  official   Boolean        @default(false)
}

model CAHWhiteCard {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  type      String   @default("white")
  pack      CAHPack  @relation(fields: [packId], references: [id])
  packId    String    @db.ObjectId
}

model CAHBlackCard {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  type      String   @default("black")
  pack      CAHPack  @relation(fields: [packId], references: [id])
  packId    String    @db.ObjectId
}

// Necessary for Next auth
model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String    @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Lobby         Lobby[]
}

model VerificationToken {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
